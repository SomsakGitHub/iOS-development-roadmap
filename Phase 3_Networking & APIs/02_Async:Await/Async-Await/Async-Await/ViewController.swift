//üéØ ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ async/await ?
//‡∏Å‡πà‡∏≠‡∏ô iOS 15 ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô code ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ (callback ‡∏´‡∏£‡∏∑‡∏≠ completion handler):

//URLSession.shared.dataTask(with: url) { data, response, error in
//    // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
//}.resume()

//‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏Ñ‡∏∑‡∏≠:
//‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏±‡πâ‡∏ô (callback hell)
//‡∏≠‡πà‡∏≤‡∏ô‡∏¢‡∏≤‡∏Å
//‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ thread ‡πÄ‡∏≠‡∏á
//‡πÅ‡∏ï‡πà‡∏û‡∏≠‡∏°‡∏µ async/await ‡πÅ‡∏•‡πâ‡∏ß‚Ä¶ üëá
//‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö ‚Äú‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‚Äù ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î ‡πÜ

//üöÄ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô-‡∏´‡∏•‡∏±‡∏á
//‚ùå ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (callback)

//func fetchUser(completion: @escaping (User?) -> Void) {
//    guard let url = URL(string: "https://example.com/user") else { return }
//    URLSession.shared.dataTask(with: url) { data, _, _ in
//        guard let data = data else { return }
//        let user = try? JSONDecoder().decode(User.self, from: data)
//        completion(user)
//    }.resume()
//}

//‚úÖ ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (async/await)
//func fetchUser() async throws -> User {
//    let url = URL(string: "https://example.com/user")!
//    let (data, _) = try await URLSession.shared.data(from: url)
//    return try JSONDecoder().decode(User.self, from: data)
//}

//üß† ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠ ‚Äú‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ completion handler‚Äù
//‡πÅ‡∏Ñ‡πà‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏∑‡πà‡∏≠ ‚Äú‡∏£‡∏≠‚Äù ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

import UIKit

struct Post: Codable {
    let id: Int
    let title: String
}

enum NetworkError: Error {
    case invalidURL
    case noData
}

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        Task {
            await fetchData()
        }
        
        Task {
            do {
                let post = try await fetchPost()
                print("‚úÖ", post.title)
            } catch {
                print("‚ùå Error:", error)
            }
        }
        
        Task {
            do {
                let data = try await fetchData(from: "https://example.com")
                print("‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", data.count)
            } catch {
                print("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error)
            }
        }
        
        Task {
            let post = try await fetchPost()
            await updateUI(with: post)
        }
    }

//    üß± ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    func fetchData() async {
        print("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î...")
        try? await Task.sleep(nanoseconds: 2_000_000_000) // ‡∏´‡∏ô‡πà‡∏ß‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        print("‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‚úÖ")
//        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î...
//        (‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
//        ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à ‚úÖ
    }

    func fetchPost() async throws -> Post {
        let url = URL(string: "https://jsonplaceholder.typicode.com/posts/1")!
        let (data, _) = try await URLSession.shared.data(from: url)
        return try JSONDecoder().decode(Post.self, from: data)
//        ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏ô‡∏•‡∏á‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô synchronous
//        ‡πÅ‡∏ï‡πà‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡∏°‡∏±‡∏ô‡∏¢‡∏±‡∏á ‚Äú‡πÑ‡∏°‡πà block thread‚Äù ‚Äî UI ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥
    }

//    ‚öôÔ∏è Async Function ‡πÅ‡∏ö‡∏ö Throw Error
//    ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡πÉ‡∏´‡πâ async function ‚Äú‡πÇ‡∏¢‡∏ô error‚Äù ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ throws
    func fetchData(from urlString: String) async throws -> Data {
        guard let url = URL(string: urlString) else { throw NetworkError.invalidURL }
        let (data, _) = try await URLSession.shared.data(from: url)
        return data
    }

//    üß© ‡πÉ‡∏ä‡πâ async let ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
//    ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢ API ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÜ ‡∏Å‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô
//    async let post1 = fetchPost(id: 1)
//    async let post2 = fetchPost(id: 2)
//
//    let (p1, p2) = try await (post1, post2)
//    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏ö: \(p1.title), \(p2.title)")

//    üß∞ ‡πÉ‡∏ä‡πâ TaskGroup ‡∏£‡∏ß‡∏°‡∏á‡∏≤‡∏ô async ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    //    üî• ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‚Äú‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‚Äù
    //    ‡πÄ‡∏ä‡πà‡∏ô ‡πÇ‡∏´‡∏•‡∏î 10 ‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 endpoint
//    func fetchAllPosts() async throws -> [Post] {
//        try await withThrowingTaskGroup(of: Post.self) { group in
//            for id in 1...5 {
//                group.addTask {
//                    try await fetchPost(id: id)
//                }
//            }
//
//            var posts: [Post] = []
//            for try await post in group {
//                posts.append(post)
//            }
//            return posts
//        }
//    }
    
//    üß≠ Thread Safety: @MainActor
//    ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å async call ‡πÄ‡∏™‡∏£‡πá‡∏à
//    ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ @MainActor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ main thread ‡πÄ‡∏ä‡πà‡∏ô:
    @MainActor
    func updateUI(with post: Post) {
//        titleLabel.text = post.title
    }
}

