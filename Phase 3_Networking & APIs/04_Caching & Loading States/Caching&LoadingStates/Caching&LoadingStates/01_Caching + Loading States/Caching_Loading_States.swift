import SwiftUI
import Combine

struct Caching_Loading_States: View {
    @StateObject private var viewModel = PostViewModel()
    
    var body: some View {
        NavigationStack {
//            üí° Group ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á ‚Äú‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù
//            ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°,
//            error ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°,
//            ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡πÅ‡∏™‡∏î‡∏á List
            Group {
                if viewModel.isLoading {
                    ProgressView("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...")
                } else if let error = viewModel.errorMessage {
                    VStack {
                        Text("‚ùå \(error)")
                        Button("‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á") {
                            Task { await viewModel.fetchPosts() }
                        }
                    }
                } else {
                    List(viewModel.posts) { post in
                        VStack(alignment: .leading) {
                            Text(post.title).font(.headline)
                            Text(post.body).font(.subheadline)
                        }
                    }
                }
            }
            .navigationTitle("Posts")
        }
        .task {
            await viewModel.fetchPosts()
        }
    }
}

@MainActor
class PostViewModel: ObservableObject {
    @Published var posts: [Post] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    private var cache: [Post] = [] // simple in-memory cache
    
    func fetchPosts() async {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cache ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢
        if !cache.isEmpty {
            posts = cache
            print("üóÇ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Cache")
            return
        }
        
        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î
        isLoading = true
        errorMessage = nil
        
        defer { isLoading = false } // ‡∏ó‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏ö
        
        guard let url = URL(string: "https://jsonplaceholder.typicode.com/posts") else {
            errorMessage = "Invalid URL"
            return
        }
        
        do {
            let (data, _) = try await URLSession.shared.data(from: url)
            let decoded = try JSONDecoder().decode([Post].self, from: data)
            posts = decoded
            cache = decoded // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á cache
            print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Network")
        } catch {
            errorMessage = "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: \(error.localizedDescription)"
        }
        
//        ‚öôÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏° Cache ‡∏ó‡∏µ‡πà ‚Äú‡πÄ‡∏Å‡πá‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£‚Äù (Disk Cache)
//        ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ cache ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏°‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
//        ‡πÉ‡∏ä‡πâ FileManager ‡∏´‡∏£‡∏∑‡∏≠ UserDefaults ‡∏Å‡πá‡πÑ‡∏î‡πâ
        
        func saveCache(_ posts: [Post]) {
            if let data = try? JSONEncoder().encode(posts) {
                UserDefaults.standard.set(data, forKey: "cachedPosts")
            }
        }

        func loadCache() -> [Post]? {
            if let data = UserDefaults.standard.data(forKey: "cachedPosts"),
               let posts = try? JSONDecoder().decode([Post].self, from: data) {
                return posts
            }
            return nil
        }
        
//        ‚úÖ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏Å loadCache() ‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏¥‡∏á API
//        ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å saveCache() ‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    }
}

#Preview {
    Caching_Loading_States()
}
