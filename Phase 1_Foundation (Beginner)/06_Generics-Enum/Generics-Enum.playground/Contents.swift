import UIKit

//üß© 1. Generics (‡πÄ‡∏à‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡∏¥‡∏Å‡∏™‡πå)
//üí° Generics ‡∏Ñ‡∏∑‡∏≠ ‚Äú‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠ type ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‚Äù
//‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î ‚Äú‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‚Äù

func swapValues<T>(_ a: inout T, _ b: inout T) {
    let temp = a
    a = b
    b = temp
}

//<T> = ‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (type placeholder)
//Swift ‡∏à‡∏∞‡∏£‡∏π‡πâ‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤ T ‡∏Ñ‡∏∑‡∏≠ type ‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ

var x = 10
var y = 20
swapValues(&x, &y)
print(x, y) // 20 10

var a = "Somsak"
var b = "Mew"
swapValues(&a, &b)
print(a, b) // Mew Somsak
//‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡∏±‡∏ö Int ‡πÅ‡∏•‡∏∞ String

//üß± Generic Type (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Struct / Class)
struct Stack<Element> {
    private var items: [Element] = []
    
    mutating func push(_ item: Element) {
        items.append(item)
    }
    
    mutating func pop() -> Element? {
        return items.popLast()
    }
}
//‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• üëá
var intStack = Stack<Int>()
intStack.push(10)
intStack.push(20)
print(intStack.pop()!) // 20

var stringStack = Stack<String>()
stringStack.push("A")
stringStack.push("B")
print(stringStack.pop()!) // B

//‚öôÔ∏è Generic Constraints (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
//‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ä‡∏ô‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Comparable ‡∏´‡∏£‡∏∑‡∏≠ Hashable

func findMax<T: Comparable>(_ a: T, _ b: T) -> T {
    return a > b ? a : b
}

print(findMax(3, 7))       // 7
print(findMax("A", "Z"))   // Z

//‚ö° 2. Enum (‡πÄ‡∏≠‡∏ô‡∏±‡∏°)
//üí° Enum ‡∏Ñ‡∏∑‡∏≠ ‚Äú‡∏ä‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‚Äù ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
//‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‚Äú‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‚Äù, ‚Äú‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‚Äù, ‚Äú‡πÇ‡∏´‡∏°‡∏î‚Äù

enum Direction {
    case north
    case south
    case east
    case west
}

var dir = Direction.north
dir = .south // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠ enum ‡∏ã‡πâ‡∏≥

//üß± ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö switch (‡∏¢‡∏≠‡∏î‡∏ô‡∏¥‡∏¢‡∏°‡∏°‡∏≤‡∏Å)
switch dir {
case .north:
    print("Go up")
case .south:
    print("Go down")
case .east:
    print("Go right")
case .west:
    print("Go left")
}

//üß© Enum ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πà‡∏≤‡∏Å‡∏≥‡∏Å‡∏±‡∏ö (Associated Values)
//‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏£‡∏ì‡∏µ

enum NetworkResponse {
    case success(data: String)
    case failure(error: String)
}

let response = NetworkResponse.success(data: "OK!")

switch response {
case .success(let data):
    print("Data:", data)
case .failure(let error):
    print("Error:", error)
}

//üßÆ Enum ‡∏û‡∏£‡πâ‡∏≠‡∏° Raw Value (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏ä‡πà‡∏ô String / Int)
enum Day: String {
    case monday = "Mon"
    case tuesday = "Tue"
    case wednesday = "Wed"
}

print(Day.monday.rawValue) // Mon

//‚öôÔ∏è Enum ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏ï‡∏±‡∏ß
enum TrafficLight {
    case red, yellow, green
    
    func action() -> String {
        switch self {
        case .red: return "Stop"
        case .yellow: return "Wait"
        case .green: return "Go"
        }
    }
}

print(TrafficLight.green.action()) // Go

//üß† Generics + Enum = ‡∏Ñ‡∏π‡πà‡πÄ‡∏ó‡∏û‡∏Ç‡∏≠‡∏á Swift
//‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏¥‡∏Å: Result<T, Error>

enum Result<T> {
    case success(T)
    case failure(Error)
}

//‡∏´‡∏£‡∏∑‡∏≠ Optional<T> ‡πÄ‡∏≠‡∏á‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô enum!

enum Optional<Wrapped> {
    case some(Wrapped)
    case none
}

//üî• Swift ‡πÉ‡∏ä‡πâ Generics + Enum ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö type-safe ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î‡∏°‡∏≤‡∏Å









