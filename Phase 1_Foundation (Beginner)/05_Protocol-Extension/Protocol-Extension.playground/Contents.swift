import UIKit

//1. Protocol ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
//Protocol = ‚Äú‡∏™‡∏±‡∏ç‡∏ç‡∏≤‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‚Äù ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤
//‡∏ñ‡πâ‡∏≤‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å conform (‡∏ó‡∏≥‡∏ï‡∏≤‡∏°) ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ property / method ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á
//‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ ‚Äúinterface‚Äù ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏∑‡πà‡∏ô (‡πÄ‡∏ä‡πà‡∏ô Java, C#)

protocol Greetable {
    var name: String { get }
    func greet()
}

//‡πÉ‡∏Ñ‡∏£ conform ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏ô‡∏µ‡πâ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ name ‡πÅ‡∏•‡∏∞ greet() ‡πÅ‡∏ô‡πà ‡πÜ
//‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
struct Person: Greetable {
    var name: String

    func greet() {
        print("Hello, my name is \(name)")
    }
}

let p = Person(name: "Somsak")
p.greet() // Hello, my name is Somsak
//‚úÖ Person ‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (‡∏°‡∏µ name ‡πÅ‡∏•‡∏∞ greet())

//üß± 2. Protocol Property ‡πÅ‡∏•‡∏∞ Method Requirements
//Property
//‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏≠‡πà‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‚Äù (get) ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏≠‡πà‡∏≤‡∏ô/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‚Äù (get set)

protocol Vehicle {
    var speed: Int { get set }
    func move()
}

//Method
//‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô function ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ body

protocol Flyable {
    func fly()
}

//‚öôÔ∏è 3. Protocol Inheritance
//‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‚Äú‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î‚Äù ‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢

protocol Animal {
    func eat()
}

protocol Pet: Animal {
    func play()
}

//üí° 4. ‡πÉ‡∏ä‡πâ Protocol ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥ Polymorphism (‡πÅ‡∏ó‡∏ô Class Hierarchy)
protocol Drawable {
    func draw()
}

struct Circle: Drawable {
    func draw() { print("Drawing circle") }
}

struct Square: Drawable {
    func draw() { print("Drawing square") }
}

func render(_ shape: Drawable) {
    shape.draw()
}

render(Circle()) // Drawing circle
render(Square()) // Drawing square
//‚úÖ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Interface ‚Äî ‡πÅ‡∏ï‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô Swift

//5. Extension ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
//Extension = ‚Äú‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á type ‡πÄ‡∏î‡∏¥‡∏°‚Äù
//‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
//‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö Struct, Class, Enum, ‡∏´‡∏£‡∏∑‡∏≠ Protocol ‡πÄ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢

extension String {
    func reversedText() -> String {
        return String(self.reversed())
    }
}

print("Hello".reversedText()) // "olleH"
//‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô String ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Apple

//‡∏Ç‡∏¢‡∏≤‡∏¢ Struct ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏á
struct User {
    let name: String
}

extension User {
    func greet() {
        print("Hi, \(name)!")
    }
}

let user = User(name: "Somsak")
user.greet() // Hi, Somsak!

//6. Extension + Protocol = Powerful Combo ‚ö°
//‡πÉ‡∏ä‡πâ‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å‡πÉ‡∏ô iOS ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ code ‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô / reusable

protocol Identifiable {
    var id: String { get }
}

extension Identifiable {
    func identify() {
        print("My ID is \(id)")
    }
}

struct User0: Identifiable {
    let id: String
}

let u = User0(id: "1234")
u.identify() // My ID is 1234
//‚úÖ ‡∏ñ‡πâ‡∏≤ type ‡πÉ‡∏î conform Identifiable ‚Üí ‡πÑ‡∏î‡πâ method identify() ‡∏ü‡∏£‡∏µ‡πÄ‡∏•‡∏¢

//7. Protocol + Extension ‡πÉ‡∏ô UIKit / SwiftUI
//UIKit ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
protocol ReusableCell {
    static var identifier: String { get }
}

extension ReusableCell {
    static var identifier: String { String(describing: Self.self) }
}

class MyTableViewCell: UITableViewCell, ReusableCell {}
print(MyTableViewCell.identifier) // "MyTableViewCell"

//SwiftUI ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
protocol ThemedView {
    var backgroundColor: String { get }
}

extension ThemedView {
    var backgroundColor: String { "Blue" }
}

struct HomeView: ThemedView {}
print(HomeView().backgroundColor) // Blue






