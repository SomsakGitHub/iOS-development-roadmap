import UIKit

//1. Optionals ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?
//‡πÉ‡∏ô Swift ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‚Äú‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‚Äù (nil) ‡πÑ‡∏î‡πâ
//‡πÅ‡∏ï‡πà‡∏õ‡∏Å‡∏ï‡∏¥ Swift ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ nil ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ crash
//‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô Swift ‡∏à‡∏∂‡∏á‡∏°‡∏µ Optional type
//üîπ ‡∏Ñ‡∏∑‡∏≠ Type ‡∏ó‡∏µ‡πà ‚Äú‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ (nil)‚Äù ‡πÑ‡∏î‡πâ

//‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® Optional
var name: String? = "Somsak"
print(name) // Optional("Somsak")
//‡∏´‡∏£‡∏∑‡∏≠
var nickname: String? = nil
//String? ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á ‚Äú‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô String ‡∏´‡∏£‡∏∑‡∏≠ nil ‡∏Å‡πá‡πÑ‡∏î‡πâ‚Äù

//‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Optional (Unwrapping)
//‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô ‚Äú‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô nil‚Äù
//‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á ‚Äúunwrap‚Äù ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏à‡∏∞ error

//Forced Unwrapping (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤) ‚ùå ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏ß‡∏±‡∏á!
let name0: String? = "Mew"
print(name0!) // ‡πÉ‡∏ä‡πâ ! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ -> "Mew"
//‡∏ñ‡πâ‡∏≤ name ‡πÄ‡∏õ‡πá‡∏ô nil ‚Üí ‡πÅ‡∏≠‡∏õ crash ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‚ùó

//Optional Binding (‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‚úÖ)
var nickname0: String? = "Sak"

if let n = nickname0 {
    print("Nickname is \(n)")
} else {
    print("No nickname")
}
//‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô nil ‚Üí ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ if ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ n

//Guard Let (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô / ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô early exit)
func greet(name: String?) {
    guard let n = name else {
        print("No name provided")
        return
    }
    print("Hello, \(n)")
}

greet(name: nil) // No name provided
greet(name: "Somsak") // Hello, Somsak

//Nil-Coalescing Operator (??)
//‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô nil
let username: String? = nil
print(username ?? "Guest") // Output: Guest

//2. Error Handling (‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î)
//Swift ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö ‚Äú‡πÇ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‚Äù (throw / catch)
//‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà crash ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

//‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å
//‡∏™‡∏£‡πâ‡∏≤‡∏á enum Error ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
//‡πÉ‡∏ä‡πâ throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
//‡πÉ‡∏ä‡πâ do { try ... } catch { ... } ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
enum NetworkError: Error {
    case noConnection
    case invalidResponse
    case timeout
}

func fetchData(from url: String) throws -> String {
    if url.isEmpty {
        throw NetworkError.invalidResponse
    }
    return "Data from \(url)"
}

//‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ do-try-catch
do {
    let data = try fetchData(from: "https://example.com")
    print(data)
} catch NetworkError.noConnection {
    print("No internet connection.")
} catch NetworkError.invalidResponse {
    print("Bad response from server.")
} catch {
    print("Unknown error: \(error)")
}

//‡∏ñ‡πâ‡∏≤‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà error ‚Üí ‡πÉ‡∏ä‡πâ try!
//‚ùó ‡∏£‡∏∞‡∏ß‡∏±‡∏á crash ‡∏ñ‡πâ‡∏≤ error ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏£‡∏¥‡∏á

let data = try! fetchData(from: "https://example.com")

//‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ error ‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô optional ‚Üí ‡πÉ‡∏ä‡πâ try?
let result = try? fetchData(from: "")
print(result ?? "No data") // Output: No data








