//üß± 2. SSL Pinning ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
//SSL Pinning = ‚Äú‡∏•‡πá‡∏≠‡∏Å‚Äù server certificate ‡∏´‡∏£‡∏∑‡∏≠ public key ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ
//‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠ ‚ÄúCA‚Äù ‡∏ó‡∏±‡πà‡∏ß‡πÇ‡∏•‡∏Å
//‡πÄ‡∏£‡∏≤‡∏ö‡∏≠‡∏Å‡πÅ‡∏≠‡∏õ‡∏ß‡πà‡∏≤ ‚Äú‡πÅ‡∏≠‡∏õ‡∏ô‡∏µ‡πâ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á server ‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‚Äù ‚úÖ

//üìå ‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ SSL Pinning?
//‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á
//‡πÅ‡∏°‡πâ‡πÉ‡∏ä‡πâ HTTPS ‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏à‡∏≤‡∏Å ‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡∏á certificate ‡πÄ‡∏ä‡πà‡∏ô
//Hacker ‡∏õ‡∏•‡∏≠‡∏° certificate ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Man-in-the-middle)
//‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Wi-Fi ‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡∏£‡∏Å proxy
//SSL Pinning ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏ó‡∏∏‡∏Å certificate ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πâ

//üõ°Ô∏è ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥ SSL Pinning ‡πÉ‡∏ô iOS
//‚úÖ ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 1: SSL Pinning ‡∏î‡πâ‡∏ß‡∏¢ URLSession (Native)
//1Ô∏è‚É£ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î certificate ‡∏à‡∏≤‡∏Å server ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÄ‡∏ä‡πà‡∏ô api.myserver.com)
//‡πÉ‡∏ä‡πâ browser ‡∏´‡∏£‡∏∑‡∏≠ command:
//openssl s_client -showcerts -connect api.myserver.com:443 </dev/null 2>/dev/null | openssl x509 -o

//2Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå myserver.cer ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (Add to bundle)

//3Ô∏è‚É£ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô delegate ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö certificate

import Foundation

class SecureSessionDelegate: NSObject, URLSessionDelegate {
    func urlSession(_ session: URLSession,
                    didReceive challenge: URLAuthenticationChallenge,
                    completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Void) {
        
        guard let serverTrust = challenge.protectionSpace.serverTrust,
              let certificate = SecTrustGetCertificateAtIndex(serverTrust, 0) else {
            completionHandler(.cancelAuthenticationChallenge, nil)
            return
        }

        // ‡πÇ‡∏´‡∏•‡∏î certificate ‡∏à‡∏≤‡∏Å app bundle
        let localCertPath = Bundle.main.path(forResource: "myserver", ofType: "cer")!
        let localCertData = try! Data(contentsOf: URL(fileURLWithPath: localCertPath))
        let serverCertData = SecCertificateCopyData(certificate) as Data
        
        // ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö certificate ‡∏à‡∏≤‡∏Å server ‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô bundle
        if localCertData == serverCertData {
            let credential = URLCredential(trust: serverTrust)
            completionHandler(.useCredential, credential)
        } else {
            print("‚ùå SSL Pinning failed")
            completionHandler(.cancelAuthenticationChallenge, nil)
        }
    }
}

//4Ô∏è‚É£ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

func fetchData() {
    let delegate = SecureSessionDelegate()
    let session = URLSession(configuration: .default, delegate: delegate, delegateQueue: nil)

    let url = URL(string: "https://api.myserver.com/data")!
    let task = session.dataTask(with: url) { data, _, error in
        if let data = data {
            print("‚úÖ Response:", String(data: data, encoding: .utf8) ?? "")
        } else {
            print("‚ùå Error:", error ?? "Unknown")
        }
    }
    task.resume()
}

//‚úÖ ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà 2: SSL Pinning ‡∏î‡πâ‡∏ß‡∏¢ Alamofire

import Alamofire

class NetworkManager {
    static let shared = NetworkManager()
    
    let session: Session
    
    private init() {
        let serverTrustPolicies: [String: ServerTrustEvaluating] = [
            "api.myserver.com": PinnedCertificatesTrustEvaluator()
        ]
        
        let manager = ServerTrustManager(evaluators: serverTrustPolicies)
        session = Session(serverTrustManager: manager)
    }
}

//‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢:

func fetchData0() {
//    Alamofire ‡∏à‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå .cer ‡∏à‡∏≤‡∏Å bundle ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ üîí
    NetworkManager.shared.session.request("https://api.myserver.com/data").response {
        response in
        print(response)
    }
}

//üß∞ ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
//
//‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå .cer ‡πÉ‡∏ô bundle ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÉ‡∏ô GitHub (‡πÉ‡∏ä‡πâ .gitignore)
//‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢
//‡∏ñ‡πâ‡∏≤ API ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‚Üí ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ pin ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏î‡πÄ‡∏°‡∏ô
//‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô certificate ‡∏ö‡πà‡∏≠‡∏¢ ‚Üí ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ public key pinning

//üö® ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
//‡∏≠‡∏¢‡πà‡∏≤‡∏ó‡∏≥ SSL Pinning ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏±‡∏í‡∏ô‡∏≤ (dev server)
//‡πÄ‡∏û‡∏£‡∏≤‡∏∞ certificate dev ‡∏°‡∏±‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡∏°‡∏≤‡∏Å
//‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ production build ‡πÄ‡∏ä‡πà‡∏ô

#if DEBUG
// normal HTTPS
#else
// SSL Pinning
#endif




