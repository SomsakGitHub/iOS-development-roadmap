//üîé Keychain ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
//
//Keychain ‡πÄ‡∏õ‡πá‡∏ô ‚ÄúSecure Storage‚Äù ‡∏ó‡∏µ‡πà Apple ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤
//‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö iOS / macOS
//
//‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Keychain ‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (encrypted) ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
//
//‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏°‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
//
//‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô UserDefaults

//üß© ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (UIKit / Swift)
//Keychain ‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô UserDefaults
//‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô wrapper ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ library ‡πÄ‡∏ä‡πà‡∏ô KeychainWrapper ‡πÑ‡∏î‡πâ

//‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ KeychainWrapper (‡∏á‡πà‡∏≤‡∏¢‡∏™‡∏∏‡∏î)
//‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Swift Package Manager:
//https://github.com/jrendel/SwiftKeychainWrapper

import UIKit
import SwiftKeychainWrapper
import Security
import SwiftUI

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    @IBAction func LoginViewTapped(_ sender: Any) {
        let swiftUIView = LoginView()
        pushViewController(rootView: swiftUIView)
    }
    
    func pushViewController<Content: View>(rootView: Content) {

        // 3. ‡∏´‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ UIHostingController
        let hostingController = UIHostingController(rootView: rootView)
        
        // 4. Present ‡πÅ‡∏ö‡∏ö modal
        present(hostingController, animated: true, completion: nil)
    }

//    ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô UserDefaults ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏ö‡∏ö iOS
    func example1() {
        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        KeychainWrapper.standard.set("mySecretToken123", forKey: "authToken")

        // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        let token = KeychainWrapper.standard.string(forKey: "authToken")
        print("üîë Token:", token ?? "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        KeychainWrapper.standard.removeObject(forKey: "authToken")
    }
    
    func example2() {
        saveToKeychain("abc123TOKEN", key: "accessToken")

        if let token = readFromKeychain(key: "accessToken") {
            print("üîê Access Token:", token)
        }

        deleteFromKeychain(key: "accessToken")
    }
    
    func saveToKeychain(_ value: String, key: String) {
        if let data = value.data(using: .utf8) {
            let query: [String: Any] = [
                kSecClass as String: kSecClassGenericPassword,
                kSecAttrAccount as String: key,
                kSecValueData as String: data
            ]
            SecItemAdd(query as CFDictionary, nil)
        }
    }
    
    func readFromKeychain(key: String) -> String? {
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: key,
            kSecReturnData as String: true,
            kSecMatchLimit as String: kSecMatchLimitOne
        ]
        
        var item: CFTypeRef?
        if SecItemCopyMatching(query as CFDictionary, &item) == noErr {
            if let data = item as? Data {
                return String(data: data, encoding: .utf8)
            }
        }
        return nil
    }
    
    func deleteFromKeychain(key: String) {
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: key
        ]
        SecItemDelete(query as CFDictionary)
    }
}

