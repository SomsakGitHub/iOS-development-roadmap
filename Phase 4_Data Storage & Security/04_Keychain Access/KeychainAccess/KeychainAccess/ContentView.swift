import SwiftUI
import Security
import Combine

struct User: Codable {
    let id: Int
    let name: String
}

//‚úÖ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å / ‡∏≠‡πà‡∏≤‡∏ô / ‡∏•‡∏ö Token ‡πÉ‡∏ô Keychain
class KeychainManager {
    
    static func save(key: String, value: String) {
        if let data = value.data(using: .utf8) {
            let query: [String: Any] = [
                kSecClass as String: kSecClassGenericPassword,
                kSecAttrAccount as String: key,
                kSecValueData as String: data
            ]
            // ‡∏•‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ key ‡πÄ‡∏î‡∏¥‡∏°)
            SecItemDelete(query as CFDictionary)
            // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            SecItemAdd(query as CFDictionary, nil)
        }
    }
    
    static func load(key: String) -> String? {
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: key,
            kSecReturnData as String: true,
            kSecMatchLimit as String: kSecMatchLimitOne
        ]
        
        var dataTypeRef: AnyObject?
        let status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)
        
        if status == errSecSuccess,
           let data = dataTypeRef as? Data,
           let result = String(data: data, encoding: .utf8) {
            return result
        }
        return nil
    }
    
    static func delete(key: String) {
        let query: [String: Any] = [
            kSecClass as String: kSecClassGenericPassword,
            kSecAttrAccount as String: key
        ]
        SecItemDelete(query as CFDictionary)
    }
}

class AuthViewModel: ObservableObject {
    @Published var token: String? {
        didSet {
            if let token = token {
                KeychainManager.save(key: "authToken", value: token)
            } else {
                KeychainManager.delete(key: "authToken")
            }
        }
    }
    
    init() {
        token = KeychainManager.load(key: "authToken")
    }
}

struct ContentView: View {
    @StateObject var vm = AuthViewModel()
    
    var body: some View {
        VStack {
            if let token = vm.token {
                Text("‚úÖ Logged in with token: \(token)")
                Button("Logout") { vm.token = nil }
            } else {
                Button("Login") { vm.token = "secretToken123" }
            }
        }
        .padding()
    }
    
//    ‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    func KeychainManagerUse() {
        KeychainManager.save(key: "authToken", value: "abc123")

        if let token = KeychainManager.load(key: "authToken") {
            print("üîë Token:", token)
        }

        KeychainManager.delete(key: "authToken")
    }
    
    func keychainStruct() {
        let user = User(id: 1, name: "Alice")

        if let data = try? JSONEncoder().encode(user) {
            KeychainManager.save(key: "currentUser", value: data.base64EncodedString())
        }
    }
    
//‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤:
    func keychainStructGet() {
        if let str = KeychainManager.load(key: "currentUser"),
           let data = Data(base64Encoded: str),
           let user = try? JSONDecoder().decode(User.self, from: data) {
            print("üë©‚Äçüíª Name:", user.name)
        }
    }
}

#Preview {
    ContentView()
}

//üß† Keychain ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
//
//Keychain ‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö (secure storage) ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏î‡∏¢ iOS/macOS
//Apple ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ß‡πâ‡πÉ‡∏ô ‚ÄúSecure Enclave‚Äù ‡∏ã‡∏∂‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ

//üîí ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô
//‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (AES-256)
//‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏°‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
//‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö biometric (Touch ID / Face ID) ‡πÑ‡∏î‡πâ
//Sync ‡∏ú‡πà‡∏≤‡∏ô iCloud Keychain ‡πÑ‡∏î‡πâ

//üíº Keychain Access (App ‡πÉ‡∏ô macOS)
//
//‡πÉ‡∏ô macOS ‡∏à‡∏∞‡∏°‡∏µ‡πÅ‡∏≠‡∏õ‡∏ä‡∏∑‡πà‡∏≠ Keychain Access.app
//‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: /Applications/Utilities/Keychain Access.app
//‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π / ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô keychain ‡πÄ‡∏ä‡πà‡∏ô
//Password ‡∏Ç‡∏≠‡∏á Wi-Fi
//Login credentials ‡∏Ç‡∏≠‡∏á Safari
//Certificates, Keys, Secure Notes

//‚öôÔ∏è Keychain ‡∏ö‡∏ô iOS App
//
//‡∏ö‡∏ô iOS ‡πÑ‡∏°‡πà‡∏°‡∏µ UI ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏ö‡∏ö Keychain Access
//‡πÅ‡∏ï‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î Swift ‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
//‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API ‡∏à‡∏≤‡∏Å framework Security.framework

//üîπ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Keychain ‡πÉ‡∏ô Swift
//
//Apple ‡πÉ‡∏´‡πâ API ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏á (C-style) ‡∏ú‡πà‡∏≤‡∏ô Security framework
//‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô Swift

//üì¶ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö struct (‡∏î‡πâ‡∏ß‡∏¢ Codable)
//
//‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Å‡πá‡∏ö object ‡πÄ‡∏ä‡πà‡∏ô UserModel
//‡πÉ‡∏´‡πâ encode ‡πÄ‡∏õ‡πá‡∏ô Data ‡∏Å‡πà‡∏≠‡∏ô




