//‚úÖ ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£
//Core Data ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà database ‚Äî
//‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ object graph management framework
//‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ model objects (‡πÄ‡∏ä‡πà‡∏ô User, Note, Product) ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å
//‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô SQLite ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á

//‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (UIKit / SwiftUI)
//1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á Model (Entity)
//
//‡πÉ‡∏ô Xcode:
//File ‚Üí New ‚Üí File ‚Üí Data Model ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Model.xcdatamodeld
//‡πÄ‡∏û‡∏¥‡πà‡∏° Entity ‡∏ä‡∏∑‡πà‡∏≠ Note
//‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà Attributes:
//title: String
//date: Date

//üìå ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô

//‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô query ‡πÅ‡∏ö‡∏ö object-oriented (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á SQL)
//‡∏°‡∏µ integration ‡∏Å‡∏±‡∏ö SwiftUI ‡∏ú‡πà‡∏≤‡∏ô @FetchRequest
//‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö migration, relationship, ‡πÅ‡∏•‡∏∞ performance ‡∏î‡∏µ‡∏°‡∏≤‡∏Å

//‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î
//‡∏°‡∏µ learning curve ‡∏™‡∏π‡∏á
//‡∏ñ‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡πÄ‡∏•‡πá‡∏Å ‡∏≠‡∏≤‡∏à‡∏î‡∏π‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô

import SwiftUI
import CoreData

struct CoreDataView: View {
    @Environment(\.managedObjectContext) private var viewContext

    @FetchRequest(
        sortDescriptors: [NSSortDescriptor(keyPath: \Item.timestamp, ascending: true)],
        animation: .default)
    private var items: FetchedResults<Item>

    var body: some View {
        NavigationView {
            List {
                ForEach(items) { item in
                    NavigationLink {
                        Text("Item at \(item.timestamp!, formatter: itemFormatter)")
                    } label: {
                        Text(item.timestamp!, formatter: itemFormatter)
                    }
                }
                .onDelete(perform: deleteItems)
            }
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    EditButton()
                }
                ToolbarItem {
                    Button(action: addItem) {
                        Label("Add Item", systemImage: "plus")
                    }
                }
            }
            Text("Select an item")
        }
    }

    private func addItem() {
        withAnimation {
            let newItem = Item(context: viewContext)
            newItem.timestamp = Date()

            do {
                try viewContext.save()
            } catch {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                let nsError = error as NSError
                fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
            }
        }
    }

    private func deleteItems(offsets: IndexSet) {
        withAnimation {
            offsets.map { items[$0] }.forEach(viewContext.delete)

            do {
                try viewContext.save()
            } catch {
                // Replace this implementation with code to handle the error appropriately.
                // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                let nsError = error as NSError
                fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
            }
        }
    }
}

private let itemFormatter: DateFormatter = {
    let formatter = DateFormatter()
    formatter.dateStyle = .short
    formatter.timeStyle = .medium
    return formatter
}()

#Preview {
    CoreDataView().environment(\.managedObjectContext, PersistenceController.preview.container.viewContext)
}

