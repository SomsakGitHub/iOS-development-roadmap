//üéØ ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏Å: Codable
//
//‡πÉ‡∏ô Swift ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á JSON ‚ÜîÔ∏è Object ‡πÉ‡∏ä‡πâ‡πÇ‡∏õ‡∏£‡πÇ‡∏ï‡∏Ñ‡∏≠‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤

//Codable = Decodable + Encodable

//Decodable ‚Üí ‡πÅ‡∏õ‡∏•‡∏á JSON ‚Üí Struct
//
//Encodable ‚Üí ‡πÅ‡∏õ‡∏•‡∏á Struct ‚Üí JSON
//
//Codable ‚Üí ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)

//üì¶ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á JSON
//
//‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:

//{
//  "userId": 1,
//  "id": 101,
//  "title": "Hello Swift",
//  "body": "Learning Codable is easy!"
//}

//üß± ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Struct ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö JSON

struct Post: Codable {
    let userId: Int
    let id: Int
    let title: String
    let body: String
}

//‚úÖ ‡∏ä‡∏∑‡πà‡∏≠ property ‡∏ï‡πâ‡∏≠‡∏á ‚Äú‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö key‚Äù ‡πÉ‡∏ô JSON (case-sensitive)

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }

    //üß© ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÅ‡∏õ‡∏•‡∏á JSON ‚Üí Struct (Decode)
    func example() {
        let jsonData = """
        {
          "userId": 1,
          "id": 101,
          "title": "Hello Swift",
          "body": "Learning Codable is easy!"
        }
        """.data(using: .utf8)!

        do {
            let post = try JSONDecoder().decode(Post.self, from: jsonData)
            print(post.title) // üëâ "Hello Swift"
        } catch {
            print("‚ùå JSON decode error:", error)
        }
        
//        üí° ‡πÉ‡∏ä‡πâ JSONDecoder().decode(YourStruct.self, from: data)
//        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÄ‡∏õ‡πá‡∏ô object ‡∏Ç‡∏≠‡∏á struct ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
    }
    
//    üß† ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏õ‡∏•‡∏á Struct ‚Üí JSON (Encode)
    func example2() {
        let post = Post(userId: 1, id: 101, title: "Swift Codable", body: "Encode example")

        do {
            let data = try JSONEncoder().encode(post)
            let jsonString = String(data: data, encoding: .utf8)!
            print(jsonString)
//        {"userId":1,"id":101,"title":"Swift Codable","body":"Encode example"}
        } catch {
            print("‚ùå Encode error:", error)
        }
    }
    
//    üßÆ JSON Array ‚Üí [Struct]
//    ‡∏ñ‡πâ‡∏≤ API ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏≠‡∏≤‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ object‚Äù ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
//    [
//      { "id": 1, "title": "A" },
//      { "id": 2, "title": "B" }
//    ]
//    ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ [Post].self ‡∏ï‡∏≠‡∏ô decode:
    
//    struct PostExample3: Codable {
//        let id: Int
//        let title: String
//    }
//
//    do {
//        let posts = try JSONDecoder().decode([PostExample3].self, from: jsonData)
//        print(posts[0].title) // "A"
//    } catch {
//        print(error)
//    }
    
//    üé≠ ‡∏ñ‡πâ‡∏≤ key ‡πÉ‡∏ô JSON ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ property
//    ‡∏™‡∏°‡∏°‡∏ï‡∏¥ JSON ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
    
//    {
//      "user_id": 1,
//      "post_title": "Hello"
//    }
    
//    ‡πÅ‡∏ï‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ property ‡πÅ‡∏ö‡∏ö Swift ‡πÄ‡∏ä‡πà‡∏ô userId, title
//    ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ CodingKeys mapping ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ üëá

//    struct Post: Codable {
//        let userId: Int
//        let title: String
//
//        enum CodingKeys: String, CodingKey {
//            case userId = "user_id"
//            case title = "post_title"
//        }
//    }
    
//    ‚ö° CodingKeys ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢ ‚Äú‡πÅ‡∏°‡πá‡∏õ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô JSON‚Äù ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö property ‡πÉ‡∏ô struct
    
//    üí• ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á JSON ‡∏ã‡πâ‡∏≠‡∏ô (Nested JSON)
//    {
//      "id": 1,
//      "user": {
//        "name": "Alice",
//        "email": "alice@example.com"
//      }
//    }
    
//    struct Post: Codable {
//        let id: Int
//        let user: User
//    }
//
//    struct User: Codable {
//        let name: String
//        let email: String
//    }

//    ‡∏ï‡∏≠‡∏ô decode ‡∏Å‡πá‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°:
//
//    let post = try JSONDecoder().decode(Post.self, from: data)
//    print(post.user.name) // Alice
    
//    üß© Optional Fields
//
//    ‡∏ö‡∏≤‡∏á API ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ö‡∏≤‡∏á key ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÄ‡∏ä‡πà‡∏ô "body" ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á object
//    ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ? ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ decode ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:
    
//    struct Post: Codable {
//        let id: Int
//        let title: String?
//    }

//    ‚úÖ ‡∏ñ‡πâ‡∏≤ key ‡∏´‡∏≤‡∏¢ ‚Üí title ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô nil ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞ crash
    
//    ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Decoder ‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÄ‡∏ä‡πà‡∏ô snake_case ‚Üí camelCase)
//    ‡∏ñ‡πâ‡∏≤ API ‡πÉ‡∏ä‡πâ key ‡πÅ‡∏ö‡∏ö "user_id" ‡πÅ‡∏ï‡πà struct ‡πÄ‡∏õ‡πá‡∏ô userId
//    ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô CodingKeys ‡πÄ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
//    ‡πÉ‡∏ä‡πâ decoder ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢:
    
//    let decoder = JSONDecoder()
//    decoder.keyDecodingStrategy = .convertFromSnakeCase
//
//    let post = try decoder.decode(Post.self, from: data)
    
//    üîÑ ‡∏°‡∏±‡∏ô‡∏à‡∏∞ map ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å user_id ‚Üí userId, created_at ‚Üí createdAt
    
//    üß≠ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£: Fetch + Parse JSON ‡∏à‡∏≤‡∏Å API
    
//    struct Post: Codable {
//        let id: Int
//        let title: String
//        let body: String
//    }
//
//    func fetchPost() async {
//        guard let url = URL(string: "https://jsonplaceholder.typicode.com/posts/1") else { return }
//        do {
//            let (data, _) = try await URLSession.shared.data(from: url)
//            let post = try JSONDecoder().decode(Post.self, from: data)
//            print("‚úÖ Title:", post.title)
//        } catch {
//            print("‚ùå Error:", error)
//        }
//    }


}

